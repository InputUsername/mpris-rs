#![allow(unknown_lints)]
#![allow(clippy::all)]
#![allow(missing_debug_implementations,
        missing_copy_implementations,
        trivial_casts,
        trivial_numeric_casts,
        unsafe_code,
        unstable_features,
        unused_import_braces,
        unused_qualifications,
        unused_imports)]
// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

use dbus as dbus;
use dbus::arg;

pub trait OrgMprisMediaPlayer2TrackList {
    type Err;
    fn get_tracks_metadata(&self, track_ids: Vec<dbus::Path>) -> Result<Vec<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg + 'static>>>>, Self::Err>;
    fn add_track(&self, uri: &str, after_track: dbus::Path, set_as_current: bool) -> Result<(), Self::Err>;
    fn remove_track(&self, track_id: dbus::Path) -> Result<(), Self::Err>;
    fn go_to(&self, track_id: dbus::Path) -> Result<(), Self::Err>;
    fn get_tracks(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err>;
    fn get_can_edit_tracks(&self) -> Result<bool, Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgMprisMediaPlayer2TrackList for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn get_tracks_metadata(&self, track_ids: Vec<dbus::Path>) -> Result<Vec<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg + 'static>>>>, Self::Err> {
        let mut m = self.method_call_with_args(&"org.mpris.MediaPlayer2.TrackList".into(), &"GetTracksMetadata".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(track_ids);
        })?;
        m.as_result()?;
        let mut i = m.iter_init();
        let metadata: Vec<::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg + 'static>>>> = i.read()?;
        Ok(metadata)
    }

    fn add_track(&self, uri: &str, after_track: dbus::Path, set_as_current: bool) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.mpris.MediaPlayer2.TrackList".into(), &"AddTrack".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(uri);
            i.append(after_track);
            i.append(set_as_current);
        })?;
        m.as_result()?;
        Ok(())
    }

    fn remove_track(&self, track_id: dbus::Path) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.mpris.MediaPlayer2.TrackList".into(), &"RemoveTrack".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(track_id);
        })?;
        m.as_result()?;
        Ok(())
    }

    fn go_to(&self, track_id: dbus::Path) -> Result<(), Self::Err> {
        let mut m = self.method_call_with_args(&"org.mpris.MediaPlayer2.TrackList".into(), &"GoTo".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(track_id);
        })?;
        m.as_result()?;
        Ok(())
    }

    fn get_tracks(&self) -> Result<Vec<dbus::Path<'static>>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.TrackList", "Tracks")
    }

    fn get_can_edit_tracks(&self) -> Result<bool, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.TrackList", "CanEditTracks")
    }
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2TrackListTrackListReplaced {
    pub tracks: Vec<dbus::Path<'static>>,
    pub current_track: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2TrackListTrackListReplaced {
    const NAME: &'static str = "TrackListReplaced";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.tracks, i);
        arg::RefArg::append(&self.current_track, i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.tracks = i.read()?;
        self.current_track = i.read()?;
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2TrackListTrackAdded {
    pub metadata: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg + 'static>>>,
    pub after_track: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2TrackListTrackAdded {
    const NAME: &'static str = "TrackAdded";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.metadata, i);
        arg::RefArg::append(&self.after_track, i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.metadata = i.read()?;
        self.after_track = i.read()?;
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2TrackListTrackRemoved {
    pub track_id: dbus::Path<'static>,
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2TrackListTrackRemoved {
    const NAME: &'static str = "TrackRemoved";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.track_id, i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.track_id = i.read()?;
        Ok(())
    }
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2TrackListTrackMetadataChanged {
    pub track_id: dbus::Path<'static>,
    pub metadata: ::std::collections::HashMap<String, arg::Variant<Box<arg::RefArg + 'static>>>,
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2TrackListTrackMetadataChanged {
    const NAME: &'static str = "TrackMetadataChanged";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.TrackList";
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.track_id, i);
        arg::RefArg::append(&self.metadata, i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.track_id = i.read()?;
        self.metadata = i.read()?;
        Ok(())
    }
}
