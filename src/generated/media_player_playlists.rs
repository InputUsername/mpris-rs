#![allow(unknown_lints)]
#![allow(clippy)]
#![allow(missing_debug_implementations,
        missing_copy_implementations,
        trivial_casts,
        trivial_numeric_casts,
        unsafe_code,
        unstable_features,
        unused_import_braces,
        unused_qualifications,
        unused_imports)]
// This code was autogenerated with dbus-codegen-rust, see https://github.com/diwic/dbus-rs

use dbus as dbus;
use dbus::arg;

pub trait OrgMprisMediaPlayer2Playlists {
    type Err;
    fn activate_playlist(&self, playlist_id: dbus::Path) -> Result<(), Self::Err>;
    fn get_playlists(&self, index: u32, max_count: u32, order: &str, reverse_order: bool) -> Result<Vec<(dbus::Path<'static>, String, String)>, Self::Err>;
    fn get_playlist_count(&self) -> Result<u32, Self::Err>;
    fn get_orderings(&self) -> Result<Vec<String>, Self::Err>;
    fn get_active_playlist(&self) -> Result<(bool, (dbus::Path<'static>, String, String)), Self::Err>;
}

impl<'a, C: ::std::ops::Deref<Target=dbus::Connection>> OrgMprisMediaPlayer2Playlists for dbus::ConnPath<'a, C> {
    type Err = dbus::Error;

    fn activate_playlist(&self, playlist_id: dbus::Path) -> Result<(), Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.mpris.MediaPlayer2.Playlists".into(), &"ActivatePlaylist".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(playlist_id);
        }));
        try!(m.as_result());
        Ok(())
    }

    fn get_playlists(&self, index: u32, max_count: u32, order: &str, reverse_order: bool) -> Result<Vec<(dbus::Path<'static>, String, String)>, Self::Err> {
        let mut m = try!(self.method_call_with_args(&"org.mpris.MediaPlayer2.Playlists".into(), &"GetPlaylists".into(), |msg| {
            let mut i = arg::IterAppend::new(msg);
            i.append(index);
            i.append(max_count);
            i.append(order);
            i.append(reverse_order);
        }));
        try!(m.as_result());
        let mut i = m.iter_init();
        let playlists: Vec<(dbus::Path<'static>, String, String)> = try!(i.read());
        Ok(playlists)
    }

    fn get_playlist_count(&self) -> Result<u32, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.Playlists", "PlaylistCount")
    }

    fn get_orderings(&self) -> Result<Vec<String>, Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.Playlists", "Orderings")
    }

    fn get_active_playlist(&self) -> Result<(bool, (dbus::Path<'static>, String, String)), Self::Err> {
        <Self as dbus::stdintf::org_freedesktop_dbus::Properties>::get(&self, "org.mpris.MediaPlayer2.Playlists", "ActivePlaylist")
    }
}

#[derive(Debug, Default)]
pub struct OrgMprisMediaPlayer2PlaylistsPlaylistChanged {
    pub playlist: (dbus::Path<'static>, String, String),
}

impl dbus::SignalArgs for OrgMprisMediaPlayer2PlaylistsPlaylistChanged {
    const NAME: &'static str = "PlaylistChanged";
    const INTERFACE: &'static str = "org.mpris.MediaPlayer2.Playlists";
    fn append(&self, i: &mut arg::IterAppend) {
        (&self.playlist as &arg::RefArg).append(i);
    }
    fn get(&mut self, i: &mut arg::Iter) -> Result<(), arg::TypeMismatchError> {
        self.playlist = try!(i.read());
        Ok(())
    }
}
