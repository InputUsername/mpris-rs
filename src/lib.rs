#![warn(missing_docs)]

//!
//! # mpris
//!
//! `mpris` is an idiomatic library for dealing with MPRIS2-compatible media players over DBus.
//!
//! This would mostly apply to the Linux-ecosystem which is a heavy user of DBus.
//!
//! ## Getting started
//!
//! Some hints on how to use this library:
//!
//! 1. Look at the examples under `examples/`.
//! 2. Look at the `PlayerFinder` struct.
//!

#[macro_use]
extern crate error_chain;
extern crate dbus;

/// Module containing all the error types.
///
/// This is generated by [`error-chain`][error-chain], which makes it possible to integrate to other crates' uses
/// of `error-chain`.
///
/// [error-chain]: https://crates.io/crates/error-chain
#[allow(missing_docs)]
pub mod errors {
    error_chain!{
        foreign_links {
            DBusError(::dbus::Error);
        }

        errors {
            /// No MPRIS2-compatible player could be found.
            NoPlayerFound {
                description("No player found")
                display("Could not find a compatible MPRIS2 player running right now.")
            }

            /// The `trackId` field could not be read from the player metadata.
            ///
            /// Non-conforming implementations of the MPRIS2 protocol might omit the required
            /// `trackId` field, which would then return this error.
            TrackIdMissing {
                description("track_id missing")
                display("mpris:trackid not present in metadata")
            }

            /// Something went wrong with a DBus call or parsing the results from it.
            DBusCallError(message: String) {
                description("DBus call failed")
                display("DBus call failed: {}", message)
            }
        }
    }
}

mod generated;

mod player;
mod find;
mod metadata;

mod prelude {
    pub use errors::*;
}

pub use player::Player;
pub use metadata::Metadata;
pub use find::PlayerFinder;

#[derive(Debug, PartialEq, Eq, Copy, Clone)]
#[allow(missing_docs)]
pub enum PlaybackStatus {
    Playing,
    Paused,
    Stopped,
}
